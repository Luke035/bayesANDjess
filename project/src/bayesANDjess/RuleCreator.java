package bayesANDjess;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;


public class RuleCreator {
	public static String clpPath = "./regoleProvaExtraction.clp";
	private PrintStream printer;
	private JessEngine engine;
	public RuleCreator(){
		File file = new File(clpPath);
		OutputStream outputStream;
		try{
			outputStream = new FileOutputStream(file);
			this.printer = new PrintStream(outputStream);
		}catch(Exception e){
			e.printStackTrace();
		}
		
		printer.println(";; CLP file with autogenerated rules");
	}
	
	public RuleCreator(JessEngine jessEngine){
		this.engine = jessEngine;
	}
	
	private void openFile(){
		File file = new File(clpPath);
		OutputStream outputStream;
		try{
			outputStream = new FileOutputStream(file);
			this.printer = new PrintStream(outputStream);
		}catch(Exception e){
			e.printStackTrace();
		}
		
		printer.println(";; CLP file with autogenerated rules");
	}
	
	private void writeTemplate(String toInfer){
		
		printer.println(";; Template per risultato");
		printer.println("(deftemplate Result_"+toInfer);
		
		printer.println(" 	(slot "+toInfer+")");
		//slot reliability
		printer.println(" 	(slot Reliability)");
		printer.println(")"); //Chiusura template
	}
	
	public void computeRulesWithExtraction(BayesNet bn, ArrayList<String> evidences, boolean printInFile){
		//TODO preliminary check on evidences
		//Check on printer
		if(printInFile && printer==null){ //Richiesta stampa ma file non creato
			openFile();
		}
		//TODO send command deftemplate
		ArrayList<Result> inferationResults = bn.inferEnumerate(evidences);
		Decider decider = new Decider();
		
		//Define templates
		ArrayList<String> nodesToInfer = bn.getNodesToInfer(evidences);
		for(int i=0; i<nodesToInfer.size(); i++){
			String node = nodesToInfer.get(i);
			if(printInFile)
				writeTemplate(node);
			if(engine != null)
				engine.addTemplate(node);
		}
		
		
		for(int i=0; i<inferationResults.size(); i++){
			if(printInFile)
				printer.println(";; Rule number "+(i+1));
			Result result = inferationResults.get(i);
			Value choosen = decider.choose(result.getValues());
			Rule r = new Rule(result.getEvidence(), 
					result.getNode(),
					choosen.getOutcome(), 
					choosen.getProbability(),
					(i+1));
			if(printInFile)
				r.printRule(printer);
			if(engine!= null) //Un costruttore o l'altro sono usati
				r.addRuleInJess(engine);
		}
	}
	
	public void computeRulesMostProbable(BayesNet bn, ArrayList<String> evidences, boolean printInFile){
		//TODO preliminary check on evidences
		if(printInFile && printer==null){ //Richiesta stampa ma file non creato
			openFile();
		}
		ArrayList<Result> inferationResults = bn.inferEnumerate(evidences);
		
		for(int i=0; i<inferationResults.size(); i++){
			if(printInFile)
				printer.println(";; Rule number "+(i+1));
			Result result = inferationResults.get(i);
			Rule r = new Rule(result.getEvidence(), 
					result.getNode(),
					result.getMostProbableValue().getOutcome(), 
					result.getMostProbableValue().getProbability(),
					(i+1));
			if(printInFile)
				r.printRule(printer);
			if(engine!= null) //Un costruttore o l'altro sono usati
				r.addRuleInJess(engine);
		}
	}
	
	public void computeRulesWithThreshold(BayesNet bn, ArrayList<String> evidences, boolean printInFile, double threshold){
		//TODO preliminary check on evidences
		//Check on printer
		if(printInFile && printer==null){ //Richiesta stampa ma file non creato
			openFile();
		}
		//TODO send command deftemplate
		ArrayList<Result> inferationResults = bn.inferEnumerate(evidences);
		Decider decider = new Decider();
		
		//Define templates
		ArrayList<String> nodesToInfer = bn.getNodesToInfer(evidences);
		for(int i=0; i<nodesToInfer.size(); i++){
			String node = nodesToInfer.get(i);
			if(printInFile)
				writeTemplate(node);
			if(engine != null)
				engine.addTemplate(node);
		}
		
		
		for(int i=0; i<inferationResults.size(); i++){
			if(printInFile)
				printer.println(";; Rule number "+(i+1));
			Result result = inferationResults.get(i);
			Value mostProbable = result.getMostProbableValue();
			
			if(mostProbable.getProbability() >= threshold){
				System.out.println("Soglia superata");
				Rule r = new Rule(result.getEvidence(), 
						result.getNode(),
						mostProbable.getOutcome(), 
						mostProbable.getProbability(),
						(i+1));
				if(printInFile)
					r.printRule(printer);
				if(engine!= null) //Un costruttore o l'altro sono usati
					r.addRuleInJess(engine);
			}else{
				System.out.println("Soglia non superata");
				Value choosen = decider.choose(result.getValues());
				Rule r = new Rule(result.getEvidence(), 
						result.getNode(),
						choosen.getOutcome(), 
						choosen.getProbability(),
						(i+1));
				if(printInFile)
					r.printRule(printer);
				if(engine!= null) //Un costruttore o l'altro sono usati
					r.addRuleInJess(engine);
			}
		}
	}
	
	public static void main(String [] args){
		BayesNet bn = new BayesNet();
		ArrayList<String> evidence = new ArrayList<String>();
		evidence.add("Queue");
		evidence.add("Agent_Type");
		//evidence.add("Mezzo");
		JessEngine jessEngine = new JessEngine();
		RuleCreator rc = new RuleCreator(jessEngine);
		//rc.computeRulesMostProbable(bn, evidence);
		//rc.computeRulesWithExtraction(bn, evidence, true); //Voglio stampa su file
		rc.computeRulesWithThreshold(bn, evidence, true, 0.6);
		
		ArrayList<Observation> observations = new ArrayList<Observation>();
		observations.add(new Observation("Queue", "high"));
		observations.add(new Observation("Agent_Type", "citizen"));
		
		String result = jessEngine.infer(observations, "Mezzo");
		if(result==null || result.equals("")){
			System.out.println("No result");
		}else{
			System.out.println("Risultato "+result);
		}
	}
}
